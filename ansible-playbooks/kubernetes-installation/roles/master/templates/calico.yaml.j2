---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdlpWb3pvMHFqeUJYdTJyQmlvbHR4WXB6WFNodW8vZmxSdmF1TGIwejVRd3A1Y05NCmdBSWtWb3dvR2kxUk5wcE5jeFpoMGZQY0tLWXZzdWsyQ2QyOTdkNTF0aEQ3aFljUHRsK3crcmJHL3U0WkRPVDgKWFFycmNNUE1GYTV5UTBEMzFEWTQvYSttMXV1OERxVnpDZDd0bmsvZkhQQk15R3IwcnpuNldpWThTSjJyUFJscgpWd3Y5TU1yREtFeE1sMWhoU0wxSHpCRzVUUHpmTEJ1dUc0U1lTeXJ3RC9Qa2o3ZWNEQ2xaUnlET0w2N0dZamNiCkpFc3FYcUdpMmJxMmxQcE5FV0g4M0VWWEx0eFZ3eCsvS2RRaHlqYXh4K1Y3Sk93dFJQMGdBL0JTTzNXdFNCM0YKTi9nbXNMM2NGeDMwalJ5TkUxamZTQmJTUHRDV3puMTBqK2krOVFJREFRQUJBb0lCQUIwN1FWcS94M1VrSG9MbQpWZ3MvWDI2YkIyaXd5RVo5L1pzd2cvREhnSTNyanpZL0k3ZUZIUWMvT3h1Mkt4U0pQREhubkpPYnp6RnhWbDkyCnQvOVRjbXFQNTRSNEgrQVowQ0ZscGNzeWpZSlhRZ09MOXlGOWdvbnpscTh0STY4ZEFGbDNOdGhlMGhISGJVcXcKMWdrS2w0YldkK2RsWWVGeEpHTTBSRmJNR0hWMW5kV0orVTZxME9iTTU4cllYcDkwbXRnTkh6OFNoTStrbUpjUQpaR3Zvam9UV0pscEFWcXZ1V2RNcEY1bCtHYUh5elppMDUxdXl3VWxhZzlRUUduYW5sRkNVbG9xaUFrNURqRWpuCnRwK2RYYmdMYzN2WEExTVNDazd6bEVvNGJSNy9EQ3NlSm9zTWlkYXBqUWRMejN3R3BKTXRmTEFnUlZISFJ6YXcKejZqc0NhMENnWUVBOU51MWxZR09CdHprdzNvL1BIelA3MjM5YjZVRFNia1pjWk52dXlQWWdOVXh6S01HR2JRMgoyMHBsREZzcngyOXRlVVJYSWQxTStqaTJhUjBiOG45QmpnWHI0SlBXWnNlRTJKVGFxdGx1UjAvT3M5NzJxdHdWCjFJYkVqMTBvNnNEbFJnbUZTQnRtbGhMbjNmZWdmVWZqVVQ4czhmREIxamNFUUZ1MlZqWllYWmNDZ1lFQXhqWFMKQkVlK3h3bjBFY1pSSDV6TGE1U1RPVUM1eGNrQTRybGFYSUJUQ0NZdDlIaXhFWnZERldLRFdhWmZUSjcwaG9LMwpnNEo1YWJyQzFxcVBDNmpWeDZFQ3FRN3Z3NVMzK09hR0ppUVFTc1g1SkdrQ1NwSFF0b0VlUXlKdyt6ZEYwTnVWCkU4U09acWlLMWFTbVQxS2x1VmFEYnlNUnFTbG11U1ovSEVkN3NWTUNnWUVBNGVweFFJNzNMcWZTUGZWbHNQWnIKbDdxQTBlaUsveE5VUVhGSjduMWxQWUQyNEpzdGZydkN2Vk9IcGYzY2g3YnNaNjNCUXRKL09vTG04bGJVT1VwbQpmcFpDQ3NQOFZub1J2UTZpTG01TWpHazdDc1JXREZEaHAyUHNxV1hINGNpMkFZZTVQRTFqdW1XWkh6aGhFQllxCnl3U2lBRndsUy9NWTdoUndTRno5N09NQ2dZQmNkdzBUWEJqZXA0RUpyYmQ0aE4vTXZ4SHpPb092aGZaNHpqa2UKUCtyOE9UdGsrY3k0eHk0NTBxd3Q3VlExM1UxN1ZvMmZ0d1ZHMG81RU1HcnM2SVZhVEgxK09tNlZrZEpGTmQxTQorN1B4L2VzZEZqT3diOWVxM0E4dkNHa21lSUdFVG50OExreTBEVm8vRWtGWGJkbkwzVlVSU28zWm1XdkhZZk1ZClVTeWQ2d0tCZ0hLTkJrSW9ka2MrU1podGllSTgxWnJXUXlVdW5SNmtVK3JXZUh6bS9TRDl1K2Q5ZmZQOFA4eEIKck1OTE00R0lJam81Y1NVZ0xsSXJGSjFHZXprVW9oOE5yclBTL1pNdEdOaXc3Yko4YSs3M09zVTc4Y3FnRncrMwpjQ2ZGdXk4U0ZtVXlOYXg0MnppWGRQVlcwSjNkRFVNWUsya1orc0xNcGtiMXI0dnNHUjFSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lJYi9vWmhYM2RmUG93RFFZSktvWklodmNOQVFFTEJRQXdFakVRTUE0R0ExVUUKQXhNSFpYUmpaQzFqWVRBZUZ3MHlNakExTXpFeE1UQXhNemxhRncweU16QTFNekV4TVRBMU1EVmFNRDR4RnpBVgpCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVNNd0lRWURWUVFERXhwcmRXSmxMV0Z3YVhObGNuWmxjaTFsCmRHTmtMV05zYVdWdWREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwyVmFNNk4KS284Z1Y3dHF3WXFKYmNXS2MxMG9icVAzNVViMnJpMjlNK1VNS2VYRFRJQUNKRmFNS0JvdFVUYWFUWE1XWWRIegozQ2ltTDdMcE5nbmR2ZTNlZGJZUSs0V0hEN1pmc1BxMnh2N3VHUXprL0YwSzYzRER6Qld1Y2tOQTk5UTJPUDJ2CnB0YnJ2QTZsY3duZTdaNVAzeHp3VE1ocTlLODUrbG9tUEVpZHF6MFphMWNML1RES3d5aE1USmRZWVVpOVI4d1IKdVV6ODN5d2JyaHVFbUVzcThBL3o1SSszbkF3cFdVY2d6aSt1eG1JM0d5UkxLbDZob3RtNnRwVDZUUkZoL054RgpWeTdjVmNNZnZ5blVJY28yc2NmbGV5VHNMVVQ5SUFQd1VqdDFyVWdkeFRmNEpyQzkzQmNkOUkwY2pSTlkzMGdXCjBqN1FsczU5ZEkvb3Z2VUNBd0VBQWFOV01GUXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVdVhuallEamZ1bGY3YWhDMwp0MlY1RmpEYkdKY3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRG5Pa29NUitnY0JZL29Jb08vNXZUaTdNNy8xCnp3WWMxa1NIU3ZWbmQwWVcvVVlFaXhVeG9ZS3ZpUjBSaEFKNGN4WCtMd0lXM3RSZUJaWThxaGk3WHhRaldRMHcKajVWVEN1VDRmNVlGcjUwWmU5ZUZ4dllBU0x2QStMZnVSamgrbFNXcE5XRjZUcVFuVkhRMDlaeG1oRFhDTEI3Uwp5T0MwTy94Q1lLUDZzcmJieE13Z2Y4bUk1bWhxVXdqUGVsMFFnamU0eTM4TmdLYjB4ZDZTaHdpamF1WmNwYSs4CmY0TmVTZVpMaGgyU1pUcXIrL0RKWkZFY3JHRTRjVlpjdWZEUERZM2xmL2FKNEk3am1GalJOUld2NzVDdTEzNG0KQzJ6cXRRY0FjZVdvL2JsU3owb1RNTkQvdGpnSTNQVUVEUHpmd2szMnUwOGJwMzd5ZTc1SXF3N0xPaEU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5VENDQWQyZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkbGRHTmsKTFdOaE1CNFhEVEl5TURVek1URXhNREV6T1ZvWERUTXlNRFV5T0RFeE1ERXpPVm93RWpFUU1BNEdBMVVFQXhNSApaWFJqWkMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtWaXVPbzBnR2FxCmFtVEN4MUFSZFBUTWxBZ2JDeGs4RWp6Yk42UFljMHBTRmZVTndZZTl4eFExb0x2UmZENklEbEYrZGxxMDZGbk0KQWFrZ2RoVTl1aytHc3NTUFVEVDZLL3NieEVwY3hKRCttbGNtd20wYm1EQ2dUNXEwbUtyOWtUOURhRDlPQUQ5cQpDMU1hcG1yc25RUVd6bDRGb294bVpsSVpuQmNtc29wRElEdVA4ZGpwYzR1eFhKWDVlc3JqQ2lEQllYU0lHNUR4Ckh6b2dOK2lOeTdSbjhteFlmVTZnZE9KdCtYVktuZ0xkTW80TDdOYi9NNlZzTE8zRi9veXJpZm92c3JvMHVQU1oKODFwb21sTGVEL0pmUVdxTDd4K1dsYzloNDlnOEI1NGNCWWxuc0J4WWxYaGZTSWZQSEdFbm9MZGJOREZ3bHI1UgpDbVRZcmxTYmdROENBd0VBQWFOV01GUXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdIUVlEVlIwT0JCWUVGTGw1NDJBNDM3cFgrMm9RdDdkbGVSWXcyeGlYTUJJR0ExVWRFUVFMTUFtQ0IyVjAKWTJRdFkyRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRFN3bnZ3eExIcG1aRHp6Y0cxSGgwMnREQ3FvN09xSgpZTU9oNEM4QTRZSE5rRnJ4NGxGNTNhcUZzanNXZ1JFTUIydXRidkVnRDRHY1prNEZ2M2xsSGJhSjJ4ZnEySkRaCkdxM2RKYS9oeFROazVsV0lHMHh4anBkcTBuZzRkeVhaUithUGxoWlFnQlFIeWFuWlJvcURHSjdDWTJET2w2WFQKWHlYVHNjMzAvZGF5T1ZJWlNyRjMzc1pjbytaNktVcDdyMWl5SnpMN3VZajg5NkYvaXlVVmlyWHNScU5MdkRNSgpVblBSUFNTRzAwUlAwN1BtR0FVY3ZZd2dVaEZSaFFidzkweTZrUFFwNm1qMTBYdGpWdTcya0hMT3lCT1JsN0MzCjdCc0U4Vm1QNnBNWEhxeWdiQko5TkxHMFNJN0F4VzFXSDRtYXpRM0hGeGtrenk4K25mUFgyaW89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://{{ groups['etcd'][0] }}:2379,https://{{ groups['etcd'][1] }}:2379,https://{{ groups['etcd'][2] }}:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key""
  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"

  # Configure the MTU to use for workload interfaces and tunnels.
  # By default, MTU is auto-detected, and explicitly setting this field should not be required.
  # You can override auto-detection by providing a non-zero value.
  veth_mtu: "0"

  # The CNI network configuration to install on each node. The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "log_file_path": "/var/log/calico/cni/cni.log",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
# Source: calico/templates/calico-kube-controllers-rbac.yaml

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---

---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  # EndpointSlices are used for Service-based network policy rule
  # enforcement.
  - apiGroups: ["discovery.k8s.io"]
    resources:
      - endpointslices
    verbs:
      - watch 
      - list
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: "{{ registry_domain }}/transformacion/calico/cni:v3.23.1"
          command: ["/opt/cni/bin/install"]
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: "{{ registry_domain }}/transformacion/calico/node:v3.23.1"
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Auto-detect IP for interface ens192
            - name: IP_AUTODETECTION_METHOD
              value: interface=ens192
            # Enable or Disable VXLAN on the default IPv6 IP pool.
            - name: CALICO_IPV6POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            # - name: CALICO_IPV4POOL_CIDR
            #   value: "192.168.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/calico-node
                - -shutdown
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
            timeoutSeconds: 10
          volumeMounts:
            # For maintaining CNI plugin API credentials.
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
              readOnly: false
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: sysfs
              mountPath: /sys/fs/
              # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
              # If the host is known to mount that filesystem already then Bidirectional can be omitted.
              mountPropagation: Bidirectional
            - name: cni-log-dir
              mountPath: /var/log/calico/cni
              readOnly: true
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sysfs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used to access CNI logs.
        - name: cni-log-dir
          hostPath:
            path: /var/log/calico/cni
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: "{{ registry_domain }}/transformacion/calico/kube-controllers:v3.23.1"
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            periodSeconds: 10
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0440

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

# This manifest creates a Pod Disruption Budget for Controller to allow K8s Cluster Autoscaler to evict

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers

---
# Source: calico/templates/calico-typha.yaml

---
# Source: calico/templates/configure-canal.yaml

---
# Source: calico/templates/kdd-crds.yaml

