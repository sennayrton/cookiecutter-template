---

- name: Creamos directorio /tmp/kube-packages si no existe
  file:
    path: "/tmp/kube-packages"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory
    recurse: yes
    
- name: Copiar paquetes kube
  copy:
    src: "files/{{ item }}"
    dest: "/tmp/kube-packages/{{ item }}"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0744'
  with_items: "{{ kube_packages }}"

# En principio no será necesario si el registry tiene salida a internet mediante proxy
#- name: Copiar imágenes kube
#  copy:
#    src: "files/kube_images/{{ item }}"
#    dest: "/tmp/kube_images/{{ item }}"
#    owner: "{{ user_name }}"
#    group: "{{ user_group }}"
#    mode: '0744'
#  with_items: "{{ kube_images }}"

- name: Desactivar swap
  shell: |
    swapoff -a
    sed -e '/swap/s/^/#/g' -i /etc/fstab
    
- name: Habilita el puerto 6443 TCP
  firewalld:
    port: 6443/tcp
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Permitir ver el bridged traffic a iptables
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    br_netfilter
    EOF

    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    modprobe br_netfilter
    sysctl --system

- name: Poner SELinux en modo permisivo
  shell: |
    setenforce 0
    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

- name: Instalar dependencias y paquetes de kubeadm , kubelet y kubectl
  yum:
    name: "/tmp/kube-packages/{{ item }}"
    state: present
    disablerepo: "*"
  with_items: "{{ kube_packages }}"

#- name: Borrar paquetes kube

#- name: Importar imágenes de kube 
  # si el registry no tiene salida a internet por proxy:
  #shell: |
  #  cd /tmp/kube_images
  #  ls * | while read image; do nerdctl load < $image; done

  # si el registry tiene salida a internet por proxy:
  #shell:
  #  for image in $(kubeadm config images list); do nerdctl pull $image; done
  
  
  ---

- name: Permitir ver el bridged traffic a iptables
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    br_netfilter
    EOF

    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    modprobe br_netfilter
    sysctl --system

- name: Instalar dependencias y paquetes de kubeadm , kubelet y kubectl
  yum:
    name: "{{ item }}"
    state: present
    disable_excludes: "kubernetes"
  with_items: "{{ kube_packages }}"

- name: Copiamos la configuración de crictl en la ruta /etc/
  copy:
    src: "files/crictl.yaml"
    dest: "/etc/crictl.yaml"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0644'


#- name: Baja las imágenes de Kubernetes versión {{ kubernetes_version }}
#  shell: kubeadm config images pull --kubernetes-version {{ kubernetes_version }} --image-repository {{ registry_domain }}:{{ registry_port }}/registry.k8s.io --kubernetes-version {{ kubernetes_version }}
#  ignore_errors: yes
#  become: yes


#- name: Baja las imágenes de coredns necesarias para Kubernetes {{ kubernetes_version }}
#  shell: kubeadm config images pull --kubernetes-version {{ kubernetes_version }} --image-repository {{ registry_domain }}:{{ registry_port }}/registry.k8s.io/coredns --kubernetes-version {{ kubernetes_version }}
#  ignore_errors: yes
#  become: yes


#- name: Importar imágenes de kube 
  # si el registry no tiene salida a internet por proxy:
  #shell: |
  #  cd /tmp/kube_images
  #  ls * | while read image; do nerdctl load < $image; done

  # si el registry tiene salida a internet por proxy:
  #shell:
  #  for image in $(kubeadm config images list); do nerdctl pull $image; done

    

