---

- name: Instalamos los dependencias de containerd definidos en la variable depend_containerd
  dnf:
    name: "{{ item }}"
    state: latest
  with_items: "{{ depend_containerd }}"


- name: Prerequisito containerd 1
  become: yes
  become_user: root
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
    overlay
    br_netfilter
    EOF

- name: Prerequisito containerd 2
  become: yes
  become_user: root  
  shell: |
    modprobe overlay

- name: Prerequisito containerd 3
  become: yes
  become_user: root  
  shell: |
    modprobe br_netfilter

- name: Setup required sysctl params, these persist across reboot
  become: yes
  become_user: root  
  shell: |
    cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    EOF

- name: Apply sysctl params without reboot
  become: yes
  become_user: root
  shell: |
    sysctl --system

- name: Instalamos containerd
  dnf:
    name: containerd.io
    state: latest

- name: Creamos directorio /usr/local/{{ entorno }}/{{ user_home_dir }}/containerd si no existe
  file:
    path: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory

- name: Creamos directorio /usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/ si no existe
  file:
    path: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory
    recurse: yes


- name: Creamos directorio /usr/local/{{ entorno }}/{{ user_home_dir }}/run/containerd si no existe
  file:
    path: "/usr/local/{{ entorno }}/{{ user_home_dir }}/run/containerd"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory
    recurse: yes

- name: Creamos directorio /usr/local/{{ entorno }}/{{ user_home_dir }}/var/lib/containerd si no existe
  file:
    path: "/usr/local/{{ entorno }}/{{ user_home_dir }}/var/lib/containerd"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory
    recurse: yes


- name: Creamos directorio /usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/certs.d/{{ hostname_registry }}:{{ registry_port }} si no existe
  file:
    path: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/certs.d/{{ hostname_registry }}:{{ registry_port }}"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: u=rw,g=r,o=r
    state: directory

- name: Copiamos el certificado del Registry a la ruta /usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/certs.d/{{ hostname_registry }}:{{ registry_port }}/
  copy:
    src: "files/ca.crt" # todo obtener certificado con del fetch
    dest: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/certs.d/{{ hostname_registry }}:{{ registry_port }}/ca.crt"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0640'

- name: Copiamos el certificado del Registry a la ruta /etc/pki/ca-trust/source/anchors/
  copy:
    src: "files/ca.crt" # todo obtener certificado con del fetch
    dest: "/etc/pki/ca-trust/source/anchors/{{ hostname_registry }}_CA.crt"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0640'

- name: Actualizamos los certificados del SO
  become: yes
  become_user: root
  command: update-ca-trust

- name: copiar config.toml (editado con ruta root y state /usr/local/{{ entorno }}/{{ user_home_dir }})
  template:
    src: "templates/config.toml.j2"
    dest: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/config.toml"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0744'

- name: Activar servicio, daemon-reload y restart
  shell: |
    systemctl enable --now containerd
    systemctl daemon-reload
    systemctl start containerd

- name: copiar containerd.service con ruta del config.toml especificada
  template:
    src: "templates/containerd.service.j2"
    dest: "/usr/lib/systemd/system/containerd.service"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0644'

- name: Copiar configuración de hosts.toml a las máquinas
  template:
    src: "templates/hosts.toml.j2"
    dest: "/usr/local/{{ entorno }}/{{ user_home_dir }}/containerd/certs.d/{{ hostname_registry }}:{{ registry_port }}/hosts.toml"
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
    mode: '0744'

- name: Activar servicio, daemon-reload y restart
  shell: |
    systemctl enable --now containerd
    systemctl daemon-reload
    systemctl start containerd
