---

- name: Comprobamos si el archivo de configuración ya tiene token de servidor  # noqa command-instead-of-shell
  command: 'grep -i "^token:" /etc/rancher/rke2/config.yaml'
  register: server_token_check
  failed_when: server_token_check.rc >= 2
  changed_when: false

- name: Agregamos el token al config.yaml
  lineinfile:
    dest: /etc/rancher/rke2/config.yaml
    line: "token: {{ hostvars[groups['rke2_servers'][0]].rke2_config_token }}"
    state: present
    insertbefore: BOF
  when:
    - '"token:" not in server_token_check.stdout'

- name: Comprobamos si el archivo de configuración ya tiene la url del servidor  # noqa command-instead-of-shell
  command: 'grep -i "^server:" /etc/rancher/rke2/config.yaml'
  register: server_url_check
  failed_when: server_url_check.rc >= 2
  changed_when: false

- name: Agregamos la URL del servidor al archivo de configuración
  lineinfile:
    dest: /etc/rancher/rke2/config.yaml
    line: "server: https://{{ kubernetes_api_server_host }}:9345"
    state: present
    insertbefore: BOF
  when:
    - '"server:" not in server_url_check.stdout'
    
- name: Añadimos la template del proxy a /etc/default/rke2-server
  template:
    src: "templates/rke2-server.j2"
    dest: "/etc/default/rke2-server"
    owner: root
    group: root
    mode: '0775'
    
- name: Iniciamos y esperamos al nodo healthy  # noqa var-spacing
  throttle: 1
  block:
    - name: Start rke2-server
      systemd:
        name: rke2-server
        state: started
        enabled: yes

    - name: Esperamos a la accesibilidad del apiserver de k8
      wait_for:
        host: "{{ kubernetes_api_server_host }}"
        port: "6443"
        state: present
        timeout: 300

    - name: Esperamos a que el proceso de kubelet esté presente en el host
      command: >-
        ps -C kubelet -F -ww --no-headers
      register: kubelet_check
      until: kubelet_check.rc == 0
      retries: 20
      delay: 10
      changed_when: false

    - name: Extraiga el hostname-override del hostname del proceso kubelet  # noqa var-spacing
      set_fact:
        kubelet_hostname_override_parameter: "{{ kubelet_check.stdout |\
          regex_search('\\s--hostname-override=((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]))\\s',\
          '\\1') }}"

    - name: Esperamos a que el nodo muestre el estado de listo
      command: >-
        /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml
        --server https://127.0.0.1:6443 get no {{ kubelet_hostname_override_parameter[0] }}
        -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: status_result
      until: status_result.stdout.find("True") != -1
      retries: 20
      delay: 10
      changed_when: false
      
- name: Añadimos módulos para kubectl, kubectx y kubens en los master para controlar el clúster
  shell: |
    ln -s /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
    /usr/local/bin/kubectl completion bash > /usr/share/bash-completion/completions/kubectl
    chmod 644 /usr/share/bash-completion/completions/kubectl
    git clone https://github.com/ahmetb/kubectx /opt/kubectx
    ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
    ln -s /opt/kubectx/kubens /usr/local/bin/kubens
  ignore_errors: true
  