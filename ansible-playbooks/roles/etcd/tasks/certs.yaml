---

#TODO
- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes
    state: directory
  become: yes

- name: Generate kubeadm configuration file
  template:
    src: templates/kubeadmcfg.j2
    dest: /etc/kubernetes/kubeadmcfg.yaml
  register: kubeadmcfg
  become: yes
  
- name: Check if CA exists
  stat:
    path: /etc/kubernetes/pki/etcd/{{ item }}
  with_items:
    - ca.crt
    - ca.key
  register: ca_certs_stats
  delegate_to: "{{ groups['etcd'][0] }}"
  run_once: yes

- name: Generate the certificate authority
  shell: kubeadm init phase certs etcd-ca
  delegate_to: "{{ groups['etcd'][0] }}"
  run_once: yes
  become: yes
  with_items: "{{ ca_certs_stats.results }}"
  register: ca_created
  when: item.stat.exists == False

- name: Fetch CA certs
  fetch:
    src: /etc/kubernetes/pki/etcd/{{ item }}
    dest: /tmp/ca_etcd_ansible/
    flat: yes
  with_items:
    - ca.crt
    - ca.key
  when: inventory_hostname == groups['etcd'][0] and ca_created.changed
  become: yes

- name: Ensure directory exists
  file: 
    path: /etc/kubernetes/pki/etcd/
    state: directory
  when: inventory_hostname != groups['etcd'][0]
  become: yes

- name: Copy CA to others hosts
  copy:
    src: /tmp/ca_etcd_ansible/{{ item }}
    dest: /etc/kubernetes/pki/etcd/{{ item }}
  with_items:
   - ca.crt
   - ca.key
  when: inventory_hostname != groups['etcd'][0] and ca_created.changed
  become: yes

- name: Remove CA files on Ansible host
  file:
    path: /tmp/ca_etcd_ansible/
    state: absent
  run_once: yes
  delegate_to: localhost
  when: ca_created.changed

- name: Check if certs exists for each member
  stat:
    path: /etc/kubernetes/pki/{{ item }}
  with_items:
    - apiserver-etcd-client.crt
    - apiserver-etcd-client.key
    - etcd/ca.crt
    - etcd/healthcheck-client.crt
    - etcd/healthcheck-client.key
    - etcd/peer.crt
    - etcd/peer.key
    - etcd/server.crt
    - etcd/server.key
  register: certs_stats

- name: Create certificates for each node
  shell: |
    kubeadm init phase certs etcd-server --config=/etc/kubernetes/kubeadmcfg.yaml
    kubeadm init phase certs etcd-peer --config=/etc/kubernetes/kubeadmcfg.yaml
    kubeadm init phase certs etcd-healthcheck-client --config=/etc/kubernetes/kubeadmcfg.yaml
    kubeadm init phase certs apiserver-etcd-client --config=/etc/kubernetes/kubeadmcfg.yaml
  become: yes
  register: certs_created
  ignore_errors: yes
  no_log: True
  with_items: "{{ certs_stats.results }}"
  when: item.stat.exists == False

- name: Check if etcd manifest exist
  stat:
    path: /etc/kubernetes/manifests/etcd.yaml
  register: etcd_manifest
  become: yes

- name: Create etcd manifest
  shell: kubeadm init phase etcd local --config=/etc/kubernetes/kubeadmcfg.yaml
  when: etcd_manifest.stat.exists == False or kubeadmcfg.changed
  notify:
    - Restart kubelet
  become: yes

- name: Fetch certs for control plane
  fetch:
    src: /etc/kubernetes/pki/{{ item }}
    dest: /tmp/cert_control_plane/{{ item }}
    flat: yes
  with_items:
    - etcd/ca.crt
    - apiserver-etcd-client.crt
    - apiserver-etcd-client.key
  when: inventory_hostname == groups['etcd'][0]
  become: yes


